WHAT CAN WE DO WITH AWK ?

1. AWK Operations:
(a) Scans a file line by line
(b) Splits each input line into fields
(c) Compares input line/fields to pattern
(d) Performs action(s) on matched lines

2. Useful For:
(a) Transform data files
(b) Produce formatted reports

3. Programming Constructs:
(a) Format output lines
(b) Arithmetic and string operations
(c) Conditionals and loops
-----------------------------------------------------



awk '{ print }' /etc/passwd
awk '{ print $0 }' /etc/passwd
awk -F':' '{ print $1 }' /etc/passwd
awk -F':' '{ print $1 }' /etc/passwd | sort

Pattern Matching  -- 09th field

awk '$9 == 500 { print $0}' /var/log/httpd/access.log
awk '$9 == 500 ' /var/log/httpd/access.log
awk '$9 == 500 {print} ' /var/log/httpd/access.log
awk '$9 == 500 {print $0} ' /var/log/httpd/access.log
------------------------------------------------
Print Lines Containing tom, jerry AND vivek

awk '/tom|jerry|vivek/' /etc/passwd
---------------------------------------------
Print 1st Line From File

awk "NR==1{print;exit}" /etc/resolv.conf
awk "NR==$line{print;exit}" /etc/resolv.conf

----------------------------------------------
Simply Arithmetic
You get the sum of all the numbers in a column:
awk '{total += $1} END {print total}' earnings.txt
-------------------------------------------------

## AWK script to list all the IP addresses that accessing your website

#!/bin/bash
d=$1
OUT=/tmp/spam.ip.$$
HTTPDLOG="/www/$d/var/log/httpd/access.log"
[ $# -eq 0 ] && { echo "Usage: $0 domain-name"; exit 999; }
if [ -f $HTTPDLOG ];
then
	awk '{print}' $HTTPDLOG >$OUT
	awk '{ print $1}' $OUT  |  sort -n | uniq -c | sort -n
else
	echo "$HTTPDLOG not found. Make sure domain exists and setup correctly."
fi
/bin/rm -f $OUT

-------------------------------------------------------------


Built In Variables In Awk

NR: NR command keeps a current count of the number of input records. 
Remember that records are usually lines. Awk command performs the pattern/action statements once for each record in a file.

NF: NF command keeps a count of the number of fields within the current input record.

FS: FS command contains the field separator character which is used to divide fields on the input line. The default is “white space”, meaning space and tab characters. 
FS can be reassigned to another character (typically in BEGIN) to change the field separator.

RS: RS command stores the current record separator character. Since,
 by default, an input line is the input record, the default record separator character is a newline.

OFS: OFS command stores the output field separator, which separates the fields when Awk prints them. 
The default is a blank space. Whenever print has several parameters separated with commas, 
it will print the value of OFS in between each parameter.

ORS: ORS command stores the output record separator, which separates the output lines when Awk prints them. 
The default is a newline character. print automatically outputs the contents of ORS at the end of 
whatever it is given to print.
--------------------------------------------------------------------------------------------

Create file employee.txt

ajay manager account 45000
sunil clerk account 25000
varun manager sales 50000
amit manager account 47000
tarun peon sales 15000
deepak clerk sales 23000
sunil peon sales 13000
satvik director purchase 80000 

---------------------

awk '{print}' employee.txt
awk '/manager/ {print}' employee.txt 
awk '{print $1,$4}' employee.txt 

TO Display lines

awk '{print NR,$0}' employee.txt 
TO display last field
awk '{print $1,$NF}' employee.txt 

Another use of NR built-in variables (Display Line From 3 to 6)
awk 'NR==3, NR==6 {print NR,$0}' employee.txt 

-----------------------------------------------
cat some.txt

 A  A1  3
 B  B222 4444
 C  C333 4455555

------------------------

To print the first item along with the row number(NR) separated with ” – “ from each line in some.txt:

awk '{print NR "- " $1 }' some.txt
awk '{print $2}' some.txt

To print any non empty line if present

awk 'NF > 0' some.txt
---------------------------------------

TO print longest line

awk '{ if (length($0) > max) max = length($0) } END { print max }' some.txt

-----------------------------
To count the lines in a file:

awk 'END { print NR }' some..txt

-------------------------------
Printing lines with more than 10 characters:
awk 'length($0) > 10' some.txt

--------------------------------

To print the squares of first numbers from 1 to n say 6:

awk 'BEGIN { for(i=1;i<=6;i++) print "square of", i, "is",i*i; }'

-------------------------------------------------------------
Select Command


#!/bin/ksh

select DRINK in tea cofee water juice appe all none
do
   case $DRINK in
      tea|cofee|water|all) 
         echo "Go to canteen"
         ;;
      juice|appe)
         echo "Available at home"
      ;;
      none) 
         break 
      ;;
      *) echo "ERROR: Invalid selection" 
      ;;
   esac
done
-----------------
awk -F ":" ' {​​​​print $1 "-" $3 }​​​​' /etc/passwd| awk -F "-" '($2 > 1000)'
